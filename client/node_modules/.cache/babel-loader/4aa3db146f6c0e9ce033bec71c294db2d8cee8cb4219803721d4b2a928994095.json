{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pavan\\\\todo-list-app\\\\client\\\\src\\\\components\\\\TodoList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TodoList = () => {\n  _s();\n  const [tasks, setTasks] = useState([]); // State to hold the list of tasks\n  const [newTask, setNewTask] = useState(''); // State to hold the new task input\n  const [editingTaskId, setEditingTaskId] = useState(null); // State to track which task is being edited\n  const [editingTaskName, setEditingTaskName] = useState(''); // State to hold the new name of the task being edited\n\n  // Fetch tasks from the backend when the component mounts\n  useEffect(() => {\n    axios.get('/api/tasks').then(response => {\n      setTasks(response.data); // Update state with the fetched tasks\n    }).catch(error => {\n      console.error('There was an error fetching the tasks!', error);\n    });\n  }, []);\n\n  // Handle adding a new task\n  const addTask = () => {\n    if (newTask.trim()) {\n      // Check if the input is not empty\n      axios.post('/api/tasks', {\n        name: newTask\n      }).then(response => {\n        setTasks([...tasks, response.data]); // Add the new task to the list\n        setNewTask(''); // Clear the input field\n      }).catch(error => {\n        console.error('There was an error adding the task!', error);\n      });\n    }\n  };\n\n  // Handle deleting a task\n  const deleteTask = id => {\n    axios.delete(`/api/tasks/${id}`).then(() => {\n      setTasks(tasks.filter(task => task._id !== id)); // Remove the task from the list\n    }).catch(error => {\n      console.error('There was an error deleting the task!', error);\n    });\n  };\n\n  // Handle editing a task\n  const editTask = (id, name) => {\n    setEditingTaskId(id);\n    setEditingTaskName(name);\n  };\n\n  // Handle updating a task\n  const updateTask = id => {\n    if (editingTaskName.trim()) {\n      // Check if the input is not empty\n      axios.put(`/api/tasks/${id}`, {\n        name: editingTaskName\n      }).then(response => {\n        setTasks(tasks.map(task => task._id === id ? response.data : task // Update the task in the list\n        ));\n        setEditingTaskId(null); // Exit editing mode\n        setEditingTaskName(''); // Clear the editing input field\n      }).catch(error => {\n        console.error('There was an error updating the task!', error);\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"To-Do List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: newTask,\n      onChange: e => setNewTask(e.target.value),\n      placeholder: \"New task\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: addTask,\n      children: \"Add Task\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: tasks.map(task => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: editingTaskId === task._id ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: editingTaskName,\n            onChange: e => setEditingTaskName(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => updateTask(task._id),\n            children: \"Save\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setEditingTaskId(null),\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [task.name, /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => editTask(task._id, task.name),\n            children: \"Edit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => deleteTask(task._id),\n            children: \"Delete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 15\n        }, this)\n      }, task._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n};\n_s(TodoList, \"FAVRzMQgYgZYGUjivjrpHM5u4VU=\");\n_c = TodoList;\nexport default TodoList;\nvar _c;\n$RefreshReg$(_c, \"TodoList\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","TodoList","_s","tasks","setTasks","newTask","setNewTask","editingTaskId","setEditingTaskId","editingTaskName","setEditingTaskName","get","then","response","data","catch","error","console","addTask","trim","post","name","deleteTask","id","delete","filter","task","_id","editTask","updateTask","put","map","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["C:/Users/pavan/todo-list-app/client/src/components/TodoList.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst TodoList = () => {\r\n  const [tasks, setTasks] = useState([]); // State to hold the list of tasks\r\n  const [newTask, setNewTask] = useState(''); // State to hold the new task input\r\n  const [editingTaskId, setEditingTaskId] = useState(null); // State to track which task is being edited\r\n  const [editingTaskName, setEditingTaskName] = useState(''); // State to hold the new name of the task being edited\r\n\r\n  // Fetch tasks from the backend when the component mounts\r\n  useEffect(() => {\r\n    axios.get('/api/tasks')\r\n      .then(response => {\r\n        setTasks(response.data); // Update state with the fetched tasks\r\n      })\r\n      .catch(error => {\r\n        console.error('There was an error fetching the tasks!', error);\r\n      });\r\n  }, []);\r\n\r\n  // Handle adding a new task\r\n  const addTask = () => {\r\n    if (newTask.trim()) { // Check if the input is not empty\r\n      axios.post('/api/tasks', { name: newTask })\r\n        .then(response => {\r\n          setTasks([...tasks, response.data]); // Add the new task to the list\r\n          setNewTask(''); // Clear the input field\r\n        })\r\n        .catch(error => {\r\n          console.error('There was an error adding the task!', error);\r\n        });\r\n    }\r\n  };\r\n\r\n  // Handle deleting a task\r\n  const deleteTask = (id) => {\r\n    axios.delete(`/api/tasks/${id}`)\r\n      .then(() => {\r\n        setTasks(tasks.filter(task => task._id !== id)); // Remove the task from the list\r\n      })\r\n      .catch(error => {\r\n        console.error('There was an error deleting the task!', error);\r\n      });\r\n  };\r\n\r\n  // Handle editing a task\r\n  const editTask = (id, name) => {\r\n    setEditingTaskId(id);\r\n    setEditingTaskName(name);\r\n  };\r\n\r\n  // Handle updating a task\r\n  const updateTask = (id) => {\r\n    if (editingTaskName.trim()) { // Check if the input is not empty\r\n      axios.put(`/api/tasks/${id}`, { name: editingTaskName })\r\n        .then(response => {\r\n          setTasks(tasks.map(task => \r\n            task._id === id ? response.data : task // Update the task in the list\r\n          ));\r\n          setEditingTaskId(null); // Exit editing mode\r\n          setEditingTaskName(''); // Clear the editing input field\r\n        })\r\n        .catch(error => {\r\n          console.error('There was an error updating the task!', error);\r\n        });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>To-Do List</h1>\r\n      <input \r\n        type=\"text\" \r\n        value={newTask} \r\n        onChange={(e) => setNewTask(e.target.value)} \r\n        placeholder=\"New task\" \r\n      />\r\n      <button onClick={addTask}>Add Task</button>\r\n\r\n      <ul>\r\n        {tasks.map(task => (\r\n          <li key={task._id}>\r\n            {editingTaskId === task._id ? (\r\n              <div>\r\n                <input \r\n                  type=\"text\" \r\n                  value={editingTaskName} \r\n                  onChange={(e) => setEditingTaskName(e.target.value)} \r\n                />\r\n                <button onClick={() => updateTask(task._id)}>Save</button>\r\n                <button onClick={() => setEditingTaskId(null)}>Cancel</button>\r\n              </div>\r\n            ) : (\r\n              <div>\r\n                {task.name}\r\n                <button onClick={() => editTask(task._id, task.name)}>Edit</button>\r\n                <button onClick={() => deleteTask(task._id)}>Delete</button>\r\n              </div>\r\n            )}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TodoList;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EACxC,MAAM,CAACS,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EAC5C,MAAM,CAACW,aAAa,EAAEC,gBAAgB,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EAC1D,MAAM,CAACa,eAAe,EAAEC,kBAAkB,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;;EAE5D;EACAC,SAAS,CAAC,MAAM;IACdC,KAAK,CAACa,GAAG,CAAC,YAAY,CAAC,CACpBC,IAAI,CAACC,QAAQ,IAAI;MAChBT,QAAQ,CAACS,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC;IAC3B,CAAC,CAAC,CACDC,KAAK,CAACC,KAAK,IAAI;MACdC,OAAO,CAACD,KAAK,CAAC,wCAAwC,EAAEA,KAAK,CAAC;IAChE,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAME,OAAO,GAAGA,CAAA,KAAM;IACpB,IAAIb,OAAO,CAACc,IAAI,CAAC,CAAC,EAAE;MAAE;MACpBrB,KAAK,CAACsB,IAAI,CAAC,YAAY,EAAE;QAAEC,IAAI,EAAEhB;MAAQ,CAAC,CAAC,CACxCO,IAAI,CAACC,QAAQ,IAAI;QAChBT,QAAQ,CAAC,CAAC,GAAGD,KAAK,EAAEU,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CAAC;QACrCR,UAAU,CAAC,EAAE,CAAC,CAAC,CAAC;MAClB,CAAC,CAAC,CACDS,KAAK,CAACC,KAAK,IAAI;QACdC,OAAO,CAACD,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;MAC7D,CAAC,CAAC;IACN;EACF,CAAC;;EAED;EACA,MAAMM,UAAU,GAAIC,EAAE,IAAK;IACzBzB,KAAK,CAAC0B,MAAM,CAAC,cAAcD,EAAE,EAAE,CAAC,CAC7BX,IAAI,CAAC,MAAM;MACVR,QAAQ,CAACD,KAAK,CAACsB,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACC,GAAG,KAAKJ,EAAE,CAAC,CAAC,CAAC,CAAC;IACnD,CAAC,CAAC,CACDR,KAAK,CAACC,KAAK,IAAI;MACdC,OAAO,CAACD,KAAK,CAAC,uCAAuC,EAAEA,KAAK,CAAC;IAC/D,CAAC,CAAC;EACN,CAAC;;EAED;EACA,MAAMY,QAAQ,GAAGA,CAACL,EAAE,EAAEF,IAAI,KAAK;IAC7Bb,gBAAgB,CAACe,EAAE,CAAC;IACpBb,kBAAkB,CAACW,IAAI,CAAC;EAC1B,CAAC;;EAED;EACA,MAAMQ,UAAU,GAAIN,EAAE,IAAK;IACzB,IAAId,eAAe,CAACU,IAAI,CAAC,CAAC,EAAE;MAAE;MAC5BrB,KAAK,CAACgC,GAAG,CAAC,cAAcP,EAAE,EAAE,EAAE;QAAEF,IAAI,EAAEZ;MAAgB,CAAC,CAAC,CACrDG,IAAI,CAACC,QAAQ,IAAI;QAChBT,QAAQ,CAACD,KAAK,CAAC4B,GAAG,CAACL,IAAI,IACrBA,IAAI,CAACC,GAAG,KAAKJ,EAAE,GAAGV,QAAQ,CAACC,IAAI,GAAGY,IAAI,CAAC;QACzC,CAAC,CAAC;QACFlB,gBAAgB,CAAC,IAAI,CAAC,CAAC,CAAC;QACxBE,kBAAkB,CAAC,EAAE,CAAC,CAAC,CAAC;MAC1B,CAAC,CAAC,CACDK,KAAK,CAACC,KAAK,IAAI;QACdC,OAAO,CAACD,KAAK,CAAC,uCAAuC,EAAEA,KAAK,CAAC;MAC/D,CAAC,CAAC;IACN;EACF,CAAC;EAED,oBACEhB,OAAA;IAAAgC,QAAA,gBACEhC,OAAA;MAAAgC,QAAA,EAAI;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACnBpC,OAAA;MACEqC,IAAI,EAAC,MAAM;MACXC,KAAK,EAAEjC,OAAQ;MACfkC,QAAQ,EAAGC,CAAC,IAAKlC,UAAU,CAACkC,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;MAC5CI,WAAW,EAAC;IAAU;MAAAT,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACvB,CAAC,eACFpC,OAAA;MAAQ2C,OAAO,EAAEzB,OAAQ;MAAAc,QAAA,EAAC;IAAQ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAE3CpC,OAAA;MAAAgC,QAAA,EACG7B,KAAK,CAAC4B,GAAG,CAACL,IAAI,iBACb1B,OAAA;QAAAgC,QAAA,EACGzB,aAAa,KAAKmB,IAAI,CAACC,GAAG,gBACzB3B,OAAA;UAAAgC,QAAA,gBACEhC,OAAA;YACEqC,IAAI,EAAC,MAAM;YACXC,KAAK,EAAE7B,eAAgB;YACvB8B,QAAQ,EAAGC,CAAC,IAAK9B,kBAAkB,CAAC8B,CAAC,CAACC,MAAM,CAACH,KAAK;UAAE;YAAAL,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACrD,CAAC,eACFpC,OAAA;YAAQ2C,OAAO,EAAEA,CAAA,KAAMd,UAAU,CAACH,IAAI,CAACC,GAAG,CAAE;YAAAK,QAAA,EAAC;UAAI;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eAC1DpC,OAAA;YAAQ2C,OAAO,EAAEA,CAAA,KAAMnC,gBAAgB,CAAC,IAAI,CAAE;YAAAwB,QAAA,EAAC;UAAM;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC3D,CAAC,gBAENpC,OAAA;UAAAgC,QAAA,GACGN,IAAI,CAACL,IAAI,eACVrB,OAAA;YAAQ2C,OAAO,EAAEA,CAAA,KAAMf,QAAQ,CAACF,IAAI,CAACC,GAAG,EAAED,IAAI,CAACL,IAAI,CAAE;YAAAW,QAAA,EAAC;UAAI;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eACnEpC,OAAA;YAAQ2C,OAAO,EAAEA,CAAA,KAAMrB,UAAU,CAACI,IAAI,CAACC,GAAG,CAAE;YAAAK,QAAA,EAAC;UAAM;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACzD;MACN,GAjBMV,IAAI,CAACC,GAAG;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAkBb,CACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEV,CAAC;AAAClC,EAAA,CArGID,QAAQ;AAAA2C,EAAA,GAAR3C,QAAQ;AAuGd,eAAeA,QAAQ;AAAC,IAAA2C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}